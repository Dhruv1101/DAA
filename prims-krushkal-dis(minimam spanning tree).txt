#include <stdio.h> 
int main(void) 
{ 
 int ch; 
 printf("Enter choice : \n1 for Dijkstras\n2 for Prims\n3 For Kruskals\ \n"); 
 printf("Enter choice : "); 
    scanf("%d",&ch); 
  switch(ch) 
  { 
  case 1: 
      { 
   Dijkstra(ch); 
   break; 
            } 
  case 2: 
      { 
   prims(ch); 
   break; 
            } 
  case 3: 
      { 
   Kruskals(ch); 
   break; 
            } 
        } 
 
 } 
visited[10]; 
int prims(void) 
{ 
 int cost[10][10],i,j,min,mincost=0,n,ne=1,a,b,u,v; 
printf("Enter no. of vertices:"); 
 scanf("%d",&n); 
 printf("Enter Adjacency Matrix: "); 
 for(i=1;i<=n;i++) 
 { 
     for(int j=1;j<=n;j++) 
     { 
         scanf("%d",&cost[i][j]); 
     } 
 } 
 visited[1]=1; 
 while(ne<n) 
 { 
     min=999; 
     for(i=1;i<=n;i++) 
     { 
         for(j=1;j<=n;j++) 
         { 
             if(cost[i][j]<min) 
             { 
                 if(visited[i]!=0) 
                 { 
                     min=cost[i][j]; 
                     a=u=i; 
                     b=v=j; 
                 } 
             } 
         } 
     } 
     if(!visited[u] || !visited[v]) 
     { 
printf("\n%d edge (%d -> %d) = %d",ne++,a,b,min); 
         mincost += min; 
         visited[b]=1; 
     } 
     cost[a][b]=cost[b][a]=999; 
 } 
 printf("\nMin. Cost=%d",mincost); 
 return 0; 
} 
 
int parent[10]; 
int find(int i) 
{ 
    while(parent[i]) 
    { 
        i=parent[i]; 
    } 
    return i; 
} 
int uni(int i,int j) 
{ 
    if(i!=j) 
    { 
        parent[j]=i; 
        return 1; 
    } 
    return 0; 
} 
int Kruskals(void) 
{ 
    int cost[10][10],u,v,i,j,min,mincost=0,n,ne=1,a,b; 
printf("Enter no. of vertices: "); 
    scanf("%d",&n); 
    printf("Enter Adjacency Matrix:\n"); 
    for(i=1;i<=n;i++) 
    { 
        for(j=1;j<=n;j++) 
        { 
            scanf("%d",&cost[i][j]); 
        } 
    } 
    while(ne<n) 
    { 
        min=999; 
        for(i=1;i<=n;i++) 
        { 
            for(j=1;j<=n;j++) 
            { 
                if(cost[i][j]<min) 
                { 
                    min=cost[i][j]; 
                    a=u=i; 
                    b=v=j; 
                } 
            } 
        } 
        u=find(u); 
        v=find(v); 
        if(uni(u,v)) 
        { 
            printf("\n%d edge(%d -> %d)=%d",ne++,a,b,min); 
            mincost += min; 
} 
        cost[a][b]=cost[b][a]=999; 
    } 
    printf("\nMin. cost of spanning tree=%d",mincost); 
 return 0; 
} 
int Dijkstra(void) 
{ 
 int cost[10][10],start,visited[10],pred[10],dist[10],min,i,j,n,count,next; 
 
 printf("Enter No. of Vertices:\n"); 
 scanf("%d",&n); 
 printf("Enter Adjacency Matrix:\n"); 
 for(i=0;i<n;i++) 
 { 
     for(j=0;j<n;j++) 
     { 
         scanf("%d",&cost[i][j]); 
     } 
 } 
 printf("Enter starting vertex: "); 
 scanf("%d",&start); 
 
 for(int i=0;i<n;i++) 
 { 
     dist[i]=cost[start][i]; 
     visited[i]=0; 
     pred[i]=start; 
 } 
 visited[start]=1; 
 dist[start]=0; 
count=1; 
 while(count < n-1) 
 { 
     min=999; 
     for(i=0;i<n;i++) 
     { 
         if(min>dist[i] && !visited[i]) 
         { 
             min=dist[i]; 
             next=i; 
         } 
     } 
     visited[next]=1; 
     for(i=0;i<n;i++) 
     { 
         if(!visited[i]) 
         { 
             if(min + cost[next][i] < dist[i]) 
             { 
                 dist[i]=min+cost[next][i]; 
                 pred[i]=next; 
             } 
         } 
     } 
     count++; 
 } 
 for(i=0;i<n;i++) 
 { 
     if(i != start) 
     { 
         printf("\nDist of %c from %c = %d ",'A'+i,'A'+start,dist[i]); 
 printf("\nPath of %c",'A'+i); 
         j=i; 
         do 
         { 
             j=pred[j]; 
             printf(" -> %c",'A'+j); 
         }while(j!=start); 
 
     } 
 } 
 return 0; 
} 